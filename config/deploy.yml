# Name of your application. Used to uniquely configure containers.
service: simple-blog

# Name of the container image.
image: junkers21/simple-blog-mrsk

# Deploy to these servers.
servers:
  sidekiq:
    cmd: bin/sidekiq
    hosts:
      - aduratech.junkers21.ovh
  web:
    hosts:
      - aduratech.junkers21.ovh
    labels:
      traefik.http.routers.kiqr_cloud.rule: "Host(`aduratech.junkers21.ovh`)"
      traefik.http.routers.kiqr_cloud_secure.entrypoints: websecure
      traefik.http.routers.kiqr_cloud_secure.rule: "Host(`aduratech.junkers21.ovh`)"
      traefik.http.routers.kiqr_cloud_secure.tls: true
      traefik.http.routers.kiqr_cloud_secure.tls.certresolver: letsencrypt
      # mkdir -p /letsencrypt && touch /letsencrypt/acme.json && chmod 600 /letsencrypt/acme.json
    options:
      add-host: host.docker.internal:host-gateway

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: ghcr.io
  username: junkers21
  # Always use an access token rather than real password when possible.
  password:
    - MRSK_REGISTRY_PASSWORD

env:
  clear:
    REDIS_URL: "redis://host.docker.internal:6379/0"
    MYSQL_HOST: "host.docker.internal"
  secret:
    - MYSQL_ROOT_PASSWORD

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: mysql:8.0
    host: aduratech.junkers21.ovh
    port: "172.17.0.1:3306:3306"
    env:
      secret:
        - MYSQL_ROOT_PASSWORD
    directories:
      - data:/var/lib/mysql
  redis:
    image: redis:7.0
    host: aduratech.junkers21.ovh
    port: "172.17.0.1:6379:6379"
    directories:
      - data:/data

# Configure custom arguments for Traefik
traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "eloi.riera.lanau@gmail.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /up
  port: 3000
  max_attempts: 10
  interval: 20s
